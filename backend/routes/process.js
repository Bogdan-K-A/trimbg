// backend/routes/process.js
import express from "express";
import multer from "multer";
import path from "path";
import fs from "fs";
import sharp from "sharp";
import pLimit from "p-limit";
import { createRequire } from "module";
import { randomUUID } from "crypto";

const require = createRequire(import.meta.url);
const { Rembg } = require("rembg-node");
const rembg = new Rembg();

const router = express.Router();
const uploadDir = "tmp";
const processedDir = "processed";
const limit = pLimit(2); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 2 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
const upload = multer({ dest: uploadDir }); // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤

// üéØ POST /api/process
// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
router.post("/process", upload.array("files", 5), async (req, res) => {
  const { color = "transparent", mirror, format = "png" } = req.body;
  const files = req.files;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ —Ñ–∞–π–ª—ã
  if (!files?.length)
    return res.status(400).json({ error: "No files uploaded" });

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
  const useAlpha = color === "transparent" && format !== "jpg";

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ RGB-—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
  let bg = null;
  if (!useAlpha) {
    const [r, g, b] = color
      .replace("#", "")
      .match(/.{2}/g)
      .map((h) => parseInt(h, 16));
    bg = { r, g, b };
  }

  const results = [];

  // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  await Promise.all(
    files.map((file, idx) =>
      limit(async () => {
        try {
          // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
          const baseName = path.parse(file.originalname).name; // –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
          const filename = `${baseName}.${format}`; // –Ω–æ–≤–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
          const outputPath = path.join(processedDir, filename);

          // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
          let sharpInput = sharp(await fs.promises.readFile(file.path));
          const metadata = await sharpInput.metadata();

          // –°–∂–∞—Ç–∏–µ, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
          if (metadata.size > 5 * 1024 * 1024 || metadata.width > 1000) {
            sharpInput = sharp(
              await sharpInput.resize({ width: 1000 }).toBuffer()
            );
          }

          // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é rembg
          let img = await rembg.remove(sharpInput);

          // –ó–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
          if (mirror === "true") img = img.flop();

          // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ—Ç–æ–Ω–Ω–æ–≥–æ —Ñ–æ–Ω–∞
          if (!useAlpha) img = img.flatten({ background: bg });

          // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
          switch (format) {
            case "jpg":
              img = img.jpeg({ quality: 90 });
              break;
            case "webp":
              img = img.webp({
                quality: 75,
                alphaQuality: 100,
                lossless: false,
                effort: 4,
              });
              break;
            default:
              img = img.png({ quality: 75 });
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –∏ —É–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
          await fs.promises.writeFile(outputPath, await img.toBuffer());
          await fs.promises.unlink(file.path);

          // –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          results.push({
            originalName: file.originalname,
            processedName: filename,
            downloadUrl: `/api/download/${filename}`,
          });
        } catch (err) {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
          console.error(`‚ùå Error: ${file.originalname}`, err);
          results.push({
            originalName: file.originalname,
            error: true,
            message: err.message,
          });

          // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è
          if (fs.existsSync(file.path)) await fs.promises.unlink(file.path);
        }
      })
    )
  );

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  res.json({ files: results });
});

export default router;
